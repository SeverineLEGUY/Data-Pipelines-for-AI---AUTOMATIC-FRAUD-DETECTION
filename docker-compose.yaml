# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports Ctrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---

version: '3.8'

x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.3.2}

  build:
    context: .        # le répertoire où se trouve ton Dockerfile
    dockerfile: Dockerfile   # (facultatif si ton fichier s'appelle bien "Dockerfile")
  environment:
    &airflow-common-env
    AIRFLOW_UID: 50000
    # Mise à jour pour CeleryExecutor
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: '' # À remplacer en production
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
  #user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  # Service de base de données PostgreSQL pour Airflow et MLflow
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # Service de file d'attente Redis pour Celery
  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

    # Service MLflow Tracking Server
  mlflow-server:
    build:
      context: .
      dockerfile: Dockerfile_MLFlow
    ports:
      - "5000:5000"
    volumes:
      - ./ml:/app/ml- 
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow-server:5000
      - MLFLOW_BACKEND_STORE_URI=postgresql://neondb_owner:${NEON_PASSWORD}@ep-dry-silence-agx65xsd-pooler.c-2.eu-central-1.aws.neon.tech/neondb?sslmode=require
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    env_file:
      - .env
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --default-artifact-root s3://fraudectection/mlflow-artefacts/
      --backend-store-uri postgresql://neondb_owner:${NEON_PASSWORD}@ep-dry-silence-agx65xsd-pooler.c-2.eu-central-1.aws.neon.tech/neondb?sslmode=require
    depends_on:
      redis:
        condition: service_healthy  
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 10s
      timeout: 5s
      retries: 5
  # Ajout du service de prédiction en temps réel
  realtime-predictor:
    build:
      context: .
      dockerfile: Dockerfile_MLFlow  # Utilise le Dockerfile optimisé pour les dépendances MLflow
    container_name: realtime_prediction_service
    environment:
      # Variable d'environnement pour la connexion à la base de données de production
      - PROD_DB_URI=postgresql://neondb_owner:${NEON_PASSWORD}@ep-dry-silence-agx65xsd-pooler.c-2.eu-central-1.aws.neon.tech/neondb?sslmode=require
      # Autres variables nécessaires pour le script
      - API_URL=https://real-time-payments-api.herokuapp.com/
      - MLFLOW_TRACKING_URI=http://mlflow-server:5000
      - MODEL_NAME=XGBoost_Fraud_Model_Prod
      - MODEL_STAGE=Production
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - RECEIVER_EMAIL=${RECEIVER_EMAIL}
      - SENDER_EMAIL=${SENDER_EMAIL}
      - APP_PASSWORD=${APP_PASSWORD}
    env_file:
      - .env
    command: python realtime_prediction_service.py
    volumes:
      - ./ml/realtime_prediction_service.py:/app/realtime_prediction_service.py  # Monte le script dans le conteneur
    restart: always
    depends_on:
      mlflow-server:
        condition: service_healthy

  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Worker
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow trigger
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Init
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() { printf '%04d%04d%04d%04d' $${1//./ }; }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $$airflow_version)
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $$min_airflow_version)
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo 'ERROR: Airflow version too old'
          exit 1
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R $${AIRFLOW_UID}:0 /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - .:/sources
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  # Airflow CLI
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command: bash -c "airflow"
      # Flower
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:
